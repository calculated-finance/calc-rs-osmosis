{
  "contract_name": "dca",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "admin",
      "dca_plus_escrow_level",
      "delegation_fee_percent",
      "fee_collectors",
      "page_limit",
      "paused",
      "staking_router_address",
      "swap_fee_percent"
    ],
    "properties": {
      "admin": {
        "$ref": "#/definitions/Addr"
      },
      "dca_plus_escrow_level": {
        "$ref": "#/definitions/Decimal"
      },
      "delegation_fee_percent": {
        "$ref": "#/definitions/Decimal"
      },
      "fee_collectors": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/FeeCollector"
        }
      },
      "page_limit": {
        "type": "integer",
        "format": "uint16",
        "minimum": 0.0
      },
      "paused": {
        "type": "boolean"
      },
      "staking_router_address": {
        "$ref": "#/definitions/Addr"
      },
      "swap_fee_percent": {
        "$ref": "#/definitions/Decimal"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "FeeCollector": {
        "type": "object",
        "required": [
          "address",
          "allocation"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "allocation": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create_pair"
        ],
        "properties": {
          "create_pair": {
            "type": "object",
            "required": [
              "address",
              "base_denom",
              "quote_denom",
              "route"
            ],
            "properties": {
              "address": {
                "$ref": "#/definitions/Addr"
              },
              "base_denom": {
                "type": "string"
              },
              "quote_denom": {
                "type": "string"
              },
              "route": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "delete_pair"
        ],
        "properties": {
          "delete_pair": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_vault"
        ],
        "properties": {
          "create_vault": {
            "type": "object",
            "required": [
              "pair_address",
              "swap_amount",
              "time_interval"
            ],
            "properties": {
              "destinations": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/definitions/Destination"
                }
              },
              "label": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "minimum_receive_amount": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "owner": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "pair_address": {
                "$ref": "#/definitions/Addr"
              },
              "position_type": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PositionType"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "slippage_tolerance": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "swap_amount": {
                "$ref": "#/definitions/Uint128"
              },
              "target_start_time_utc_seconds": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint64"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "time_interval": {
                "$ref": "#/definitions/TimeInterval"
              },
              "use_dca_plus": {
                "type": [
                  "boolean",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "deposit"
        ],
        "properties": {
          "deposit": {
            "type": "object",
            "required": [
              "address",
              "vault_id"
            ],
            "properties": {
              "address": {
                "$ref": "#/definitions/Addr"
              },
              "vault_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "cancel_vault"
        ],
        "properties": {
          "cancel_vault": {
            "type": "object",
            "required": [
              "vault_id"
            ],
            "properties": {
              "vault_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "execute_trigger"
        ],
        "properties": {
          "execute_trigger": {
            "type": "object",
            "required": [
              "trigger_id"
            ],
            "properties": {
              "trigger_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "dca_plus_escrow_level": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "delegation_fee_percent": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fee_collectors": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/definitions/FeeCollector"
                }
              },
              "page_limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              },
              "paused": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "staking_router_address": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "swap_fee_percent": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_custom_swap_fee"
        ],
        "properties": {
          "create_custom_swap_fee": {
            "type": "object",
            "required": [
              "denom",
              "swap_fee_percent"
            ],
            "properties": {
              "denom": {
                "type": "string"
              },
              "swap_fee_percent": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_custom_swap_fee"
        ],
        "properties": {
          "remove_custom_swap_fee": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_swap_adjustments"
        ],
        "properties": {
          "update_swap_adjustments": {
            "type": "object",
            "required": [
              "adjustments",
              "position_type"
            ],
            "properties": {
              "adjustments": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "integer",
                      "format": "uint8",
                      "minimum": 0.0
                    },
                    {
                      "$ref": "#/definitions/Decimal"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "position_type": {
                "$ref": "#/definitions/PositionType"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "disburse_escrow"
        ],
        "properties": {
          "disburse_escrow": {
            "type": "object",
            "required": [
              "vault_id"
            ],
            "properties": {
              "vault_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "provide_liquidity"
        ],
        "properties": {
          "provide_liquidity": {
            "type": "object",
            "required": [
              "pool_id",
              "provider_address"
            ],
            "properties": {
              "pool_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "provider_address": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Destination": {
        "type": "object",
        "required": [
          "action",
          "address",
          "allocation"
        ],
        "properties": {
          "action": {
            "$ref": "#/definitions/PostExecutionAction"
          },
          "address": {
            "$ref": "#/definitions/Addr"
          },
          "allocation": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      },
      "Duration": {
        "type": "object",
        "required": [
          "nanos",
          "seconds"
        ],
        "properties": {
          "nanos": {
            "description": "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
            "type": "integer",
            "format": "int32"
          },
          "seconds": {
            "description": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FeeCollector": {
        "type": "object",
        "required": [
          "address",
          "allocation"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "allocation": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      },
      "PositionType": {
        "type": "string",
        "enum": [
          "enter",
          "exit"
        ]
      },
      "PostExecutionAction": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "send",
              "z_delegate"
            ]
          },
          {
            "type": "object",
            "required": [
              "z_provide_liquidity"
            ],
            "properties": {
              "z_provide_liquidity": {
                "type": "object",
                "required": [
                  "duration",
                  "pool_id"
                ],
                "properties": {
                  "duration": {
                    "$ref": "#/definitions/Duration"
                  },
                  "pool_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TimeInterval": {
        "type": "string",
        "enum": [
          "every_second",
          "every_minute",
          "half_hourly",
          "hourly",
          "half_daily",
          "daily",
          "weekly",
          "fortnightly",
          "monthly"
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_config"
        ],
        "properties": {
          "get_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_pairs"
        ],
        "properties": {
          "get_pairs": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_time_trigger_ids"
        ],
        "properties": {
          "get_time_trigger_ids": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_vault"
        ],
        "properties": {
          "get_vault": {
            "type": "object",
            "required": [
              "vault_id"
            ],
            "properties": {
              "vault_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_vaults_by_address"
        ],
        "properties": {
          "get_vaults_by_address": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/definitions/Addr"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint128",
                "minimum": 0.0
              },
              "status": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/VaultStatus"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_vaults"
        ],
        "properties": {
          "get_vaults": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint128",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_events_by_resource_id"
        ],
        "properties": {
          "get_events_by_resource_id": {
            "type": "object",
            "required": [
              "resource_id"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              },
              "resource_id": {
                "$ref": "#/definitions/Uint128"
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_events"
        ],
        "properties": {
          "get_events": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_custom_swap_fees"
        ],
        "properties": {
          "get_custom_swap_fees": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_dca_plus_performance"
        ],
        "properties": {
          "get_dca_plus_performance": {
            "type": "object",
            "required": [
              "vault_id"
            ],
            "properties": {
              "vault_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_disburse_escrow_tasks"
        ],
        "properties": {
          "get_disburse_escrow_tasks": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "VaultStatus": {
        "type": "string",
        "enum": [
          "scheduled",
          "active",
          "inactive",
          "cancelled"
        ]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/Config"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Config": {
          "type": "object",
          "required": [
            "admin",
            "dca_plus_escrow_level",
            "delegation_fee_percent",
            "fee_collectors",
            "page_limit",
            "paused",
            "staking_router_address",
            "swap_fee_percent"
          ],
          "properties": {
            "admin": {
              "$ref": "#/definitions/Addr"
            },
            "dca_plus_escrow_level": {
              "$ref": "#/definitions/Decimal"
            },
            "delegation_fee_percent": {
              "$ref": "#/definitions/Decimal"
            },
            "fee_collectors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeeCollector"
              }
            },
            "page_limit": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "paused": {
              "type": "boolean"
            },
            "staking_router_address": {
              "$ref": "#/definitions/Addr"
            },
            "swap_fee_percent": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "FeeCollector": {
          "type": "object",
          "required": [
            "address",
            "allocation"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "allocation": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_custom_swap_fees": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CustomFeesResponse",
      "type": "object",
      "required": [
        "custom_fees"
      ],
      "properties": {
        "custom_fees": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/Decimal"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "get_dca_plus_performance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DcaPlusPerformanceResponse",
      "type": "object",
      "required": [
        "factor",
        "fee"
      ],
      "properties": {
        "factor": {
          "$ref": "#/definitions/Decimal"
        },
        "fee": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_disburse_escrow_tasks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DisburseEscrowTasksResponse",
      "type": "object",
      "required": [
        "vault_ids"
      ],
      "properties": {
        "vault_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_events": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EventsResponse",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Event": {
          "type": "object",
          "required": [
            "block_height",
            "data",
            "id",
            "resource_id",
            "timestamp"
          ],
          "properties": {
            "block_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "data": {
              "$ref": "#/definitions/EventData"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "resource_id": {
              "$ref": "#/definitions/Uint128"
            },
            "timestamp": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        "EventData": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "dca_vault_funds_deposited"
              ],
              "properties": {
                "dca_vault_funds_deposited": {
                  "type": "object",
                  "required": [
                    "amount"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_execution_triggered"
              ],
              "properties": {
                "dca_vault_execution_triggered": {
                  "type": "object",
                  "required": [
                    "asset_price",
                    "base_denom",
                    "quote_denom"
                  ],
                  "properties": {
                    "asset_price": {
                      "$ref": "#/definitions/Decimal"
                    },
                    "base_denom": {
                      "type": "string"
                    },
                    "quote_denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_execution_completed"
              ],
              "properties": {
                "dca_vault_execution_completed": {
                  "type": "object",
                  "required": [
                    "fee",
                    "received",
                    "sent"
                  ],
                  "properties": {
                    "fee": {
                      "$ref": "#/definitions/Coin"
                    },
                    "received": {
                      "$ref": "#/definitions/Coin"
                    },
                    "sent": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "simulated_dca_vault_execution_completed"
              ],
              "properties": {
                "simulated_dca_vault_execution_completed": {
                  "type": "object",
                  "required": [
                    "fee",
                    "received",
                    "sent"
                  ],
                  "properties": {
                    "fee": {
                      "$ref": "#/definitions/Coin"
                    },
                    "received": {
                      "$ref": "#/definitions/Coin"
                    },
                    "sent": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_execution_skipped"
              ],
              "properties": {
                "dca_vault_execution_skipped": {
                  "type": "object",
                  "required": [
                    "reason"
                  ],
                  "properties": {
                    "reason": {
                      "$ref": "#/definitions/ExecutionSkippedReason"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "simulated_dca_vault_execution_skipped"
              ],
              "properties": {
                "simulated_dca_vault_execution_skipped": {
                  "type": "object",
                  "required": [
                    "reason"
                  ],
                  "properties": {
                    "reason": {
                      "$ref": "#/definitions/ExecutionSkippedReason"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_cancelled"
              ],
              "properties": {
                "dca_vault_cancelled": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_z_delegation_succeeded"
              ],
              "properties": {
                "dca_vault_z_delegation_succeeded": {
                  "type": "object",
                  "required": [
                    "delegation",
                    "validator_address"
                  ],
                  "properties": {
                    "delegation": {
                      "$ref": "#/definitions/Coin"
                    },
                    "validator_address": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_delegation_failed"
              ],
              "properties": {
                "dca_vault_delegation_failed": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_escrow_disbursed"
              ],
              "properties": {
                "dca_vault_escrow_disbursed": {
                  "type": "object",
                  "required": [
                    "amount_disbursed",
                    "performance_fee"
                  ],
                  "properties": {
                    "amount_disbursed": {
                      "$ref": "#/definitions/Coin"
                    },
                    "performance_fee": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ExecutionSkippedReason": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "slippage_tolerance_exceeded",
                "unknown_failure"
              ]
            },
            {
              "type": "object",
              "required": [
                "price_threshold_exceeded"
              ],
              "properties": {
                "price_threshold_exceeded": {
                  "type": "object",
                  "required": [
                    "price"
                  ],
                  "properties": {
                    "price": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "price_delta_limit_exceeded"
              ],
              "properties": {
                "price_delta_limit_exceeded": {
                  "type": "object",
                  "required": [
                    "actual_price_delta",
                    "duration_in_seconds",
                    "max_price_delta"
                  ],
                  "properties": {
                    "actual_price_delta": {
                      "$ref": "#/definitions/Decimal"
                    },
                    "duration_in_seconds": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "max_price_delta": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_events_by_resource_id": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EventsResponse",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Event": {
          "type": "object",
          "required": [
            "block_height",
            "data",
            "id",
            "resource_id",
            "timestamp"
          ],
          "properties": {
            "block_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "data": {
              "$ref": "#/definitions/EventData"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "resource_id": {
              "$ref": "#/definitions/Uint128"
            },
            "timestamp": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        "EventData": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "dca_vault_funds_deposited"
              ],
              "properties": {
                "dca_vault_funds_deposited": {
                  "type": "object",
                  "required": [
                    "amount"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_execution_triggered"
              ],
              "properties": {
                "dca_vault_execution_triggered": {
                  "type": "object",
                  "required": [
                    "asset_price",
                    "base_denom",
                    "quote_denom"
                  ],
                  "properties": {
                    "asset_price": {
                      "$ref": "#/definitions/Decimal"
                    },
                    "base_denom": {
                      "type": "string"
                    },
                    "quote_denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_execution_completed"
              ],
              "properties": {
                "dca_vault_execution_completed": {
                  "type": "object",
                  "required": [
                    "fee",
                    "received",
                    "sent"
                  ],
                  "properties": {
                    "fee": {
                      "$ref": "#/definitions/Coin"
                    },
                    "received": {
                      "$ref": "#/definitions/Coin"
                    },
                    "sent": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "simulated_dca_vault_execution_completed"
              ],
              "properties": {
                "simulated_dca_vault_execution_completed": {
                  "type": "object",
                  "required": [
                    "fee",
                    "received",
                    "sent"
                  ],
                  "properties": {
                    "fee": {
                      "$ref": "#/definitions/Coin"
                    },
                    "received": {
                      "$ref": "#/definitions/Coin"
                    },
                    "sent": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_execution_skipped"
              ],
              "properties": {
                "dca_vault_execution_skipped": {
                  "type": "object",
                  "required": [
                    "reason"
                  ],
                  "properties": {
                    "reason": {
                      "$ref": "#/definitions/ExecutionSkippedReason"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "simulated_dca_vault_execution_skipped"
              ],
              "properties": {
                "simulated_dca_vault_execution_skipped": {
                  "type": "object",
                  "required": [
                    "reason"
                  ],
                  "properties": {
                    "reason": {
                      "$ref": "#/definitions/ExecutionSkippedReason"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_cancelled"
              ],
              "properties": {
                "dca_vault_cancelled": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_z_delegation_succeeded"
              ],
              "properties": {
                "dca_vault_z_delegation_succeeded": {
                  "type": "object",
                  "required": [
                    "delegation",
                    "validator_address"
                  ],
                  "properties": {
                    "delegation": {
                      "$ref": "#/definitions/Coin"
                    },
                    "validator_address": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_delegation_failed"
              ],
              "properties": {
                "dca_vault_delegation_failed": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_escrow_disbursed"
              ],
              "properties": {
                "dca_vault_escrow_disbursed": {
                  "type": "object",
                  "required": [
                    "amount_disbursed",
                    "performance_fee"
                  ],
                  "properties": {
                    "amount_disbursed": {
                      "$ref": "#/definitions/Coin"
                    },
                    "performance_fee": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ExecutionSkippedReason": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "slippage_tolerance_exceeded",
                "unknown_failure"
              ]
            },
            {
              "type": "object",
              "required": [
                "price_threshold_exceeded"
              ],
              "properties": {
                "price_threshold_exceeded": {
                  "type": "object",
                  "required": [
                    "price"
                  ],
                  "properties": {
                    "price": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "price_delta_limit_exceeded"
              ],
              "properties": {
                "price_delta_limit_exceeded": {
                  "type": "object",
                  "required": [
                    "actual_price_delta",
                    "duration_in_seconds",
                    "max_price_delta"
                  ],
                  "properties": {
                    "actual_price_delta": {
                      "$ref": "#/definitions/Decimal"
                    },
                    "duration_in_seconds": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "max_price_delta": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_pairs": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PairsResponse",
      "type": "object",
      "required": [
        "pairs"
      ],
      "properties": {
        "pairs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pair"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Pair": {
          "type": "object",
          "required": [
            "address",
            "base_denom",
            "quote_denom",
            "route"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "base_denom": {
              "type": "string"
            },
            "quote_denom": {
              "type": "string"
            },
            "route": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_time_trigger_ids": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TriggerIdsResponse",
      "type": "object",
      "required": [
        "trigger_ids"
      ],
      "properties": {
        "trigger_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_vault": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultResponse",
      "type": "object",
      "required": [
        "vault"
      ],
      "properties": {
        "vault": {
          "$ref": "#/definitions/Vault"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "DcaPlusConfig": {
          "type": "object",
          "required": [
            "escrow_level",
            "escrowed_balance",
            "model_id",
            "standard_dca_received_amount",
            "standard_dca_swapped_amount",
            "total_deposit"
          ],
          "properties": {
            "escrow_level": {
              "$ref": "#/definitions/Decimal"
            },
            "escrowed_balance": {
              "$ref": "#/definitions/Coin"
            },
            "model_id": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "standard_dca_received_amount": {
              "$ref": "#/definitions/Coin"
            },
            "standard_dca_swapped_amount": {
              "$ref": "#/definitions/Coin"
            },
            "total_deposit": {
              "$ref": "#/definitions/Coin"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Destination": {
          "type": "object",
          "required": [
            "action",
            "address",
            "allocation"
          ],
          "properties": {
            "action": {
              "$ref": "#/definitions/PostExecutionAction"
            },
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "allocation": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "Duration": {
          "type": "object",
          "required": [
            "nanos",
            "seconds"
          ],
          "properties": {
            "nanos": {
              "description": "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
              "type": "integer",
              "format": "int32"
            },
            "seconds": {
              "description": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "Pair": {
          "type": "object",
          "required": [
            "address",
            "base_denom",
            "quote_denom",
            "route"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "base_denom": {
              "type": "string"
            },
            "quote_denom": {
              "type": "string"
            },
            "route": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        },
        "PostExecutionAction": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "send",
                "z_delegate"
              ]
            },
            {
              "type": "object",
              "required": [
                "z_provide_liquidity"
              ],
              "properties": {
                "z_provide_liquidity": {
                  "type": "object",
                  "required": [
                    "duration",
                    "pool_id"
                  ],
                  "properties": {
                    "duration": {
                      "$ref": "#/definitions/Duration"
                    },
                    "pool_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "TimeInterval": {
          "type": "string",
          "enum": [
            "every_second",
            "every_minute",
            "half_hourly",
            "hourly",
            "half_daily",
            "daily",
            "weekly",
            "fortnightly",
            "monthly"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "TriggerConfiguration": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "object",
                  "required": [
                    "target_time"
                  ],
                  "properties": {
                    "target_time": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "Vault": {
          "type": "object",
          "required": [
            "balance",
            "created_at",
            "destinations",
            "id",
            "owner",
            "pair",
            "received_amount",
            "status",
            "swap_amount",
            "swapped_amount",
            "time_interval"
          ],
          "properties": {
            "balance": {
              "$ref": "#/definitions/Coin"
            },
            "created_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "dca_plus_config": {
              "anyOf": [
                {
                  "$ref": "#/definitions/DcaPlusConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "destinations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Destination"
              }
            },
            "id": {
              "$ref": "#/definitions/Uint128"
            },
            "label": {
              "type": [
                "string",
                "null"
              ]
            },
            "minimum_receive_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "pair": {
              "$ref": "#/definitions/Pair"
            },
            "received_amount": {
              "$ref": "#/definitions/Coin"
            },
            "slippage_tolerance": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "started_at": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "$ref": "#/definitions/VaultStatus"
            },
            "swap_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "swapped_amount": {
              "$ref": "#/definitions/Coin"
            },
            "time_interval": {
              "$ref": "#/definitions/TimeInterval"
            },
            "trigger": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TriggerConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "VaultStatus": {
          "type": "string",
          "enum": [
            "scheduled",
            "active",
            "inactive",
            "cancelled"
          ]
        }
      }
    },
    "get_vaults": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultsResponse",
      "type": "object",
      "required": [
        "vaults"
      ],
      "properties": {
        "vaults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vault"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "DcaPlusConfig": {
          "type": "object",
          "required": [
            "escrow_level",
            "escrowed_balance",
            "model_id",
            "standard_dca_received_amount",
            "standard_dca_swapped_amount",
            "total_deposit"
          ],
          "properties": {
            "escrow_level": {
              "$ref": "#/definitions/Decimal"
            },
            "escrowed_balance": {
              "$ref": "#/definitions/Coin"
            },
            "model_id": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "standard_dca_received_amount": {
              "$ref": "#/definitions/Coin"
            },
            "standard_dca_swapped_amount": {
              "$ref": "#/definitions/Coin"
            },
            "total_deposit": {
              "$ref": "#/definitions/Coin"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Destination": {
          "type": "object",
          "required": [
            "action",
            "address",
            "allocation"
          ],
          "properties": {
            "action": {
              "$ref": "#/definitions/PostExecutionAction"
            },
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "allocation": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "Duration": {
          "type": "object",
          "required": [
            "nanos",
            "seconds"
          ],
          "properties": {
            "nanos": {
              "description": "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
              "type": "integer",
              "format": "int32"
            },
            "seconds": {
              "description": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "Pair": {
          "type": "object",
          "required": [
            "address",
            "base_denom",
            "quote_denom",
            "route"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "base_denom": {
              "type": "string"
            },
            "quote_denom": {
              "type": "string"
            },
            "route": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        },
        "PostExecutionAction": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "send",
                "z_delegate"
              ]
            },
            {
              "type": "object",
              "required": [
                "z_provide_liquidity"
              ],
              "properties": {
                "z_provide_liquidity": {
                  "type": "object",
                  "required": [
                    "duration",
                    "pool_id"
                  ],
                  "properties": {
                    "duration": {
                      "$ref": "#/definitions/Duration"
                    },
                    "pool_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "TimeInterval": {
          "type": "string",
          "enum": [
            "every_second",
            "every_minute",
            "half_hourly",
            "hourly",
            "half_daily",
            "daily",
            "weekly",
            "fortnightly",
            "monthly"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "TriggerConfiguration": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "object",
                  "required": [
                    "target_time"
                  ],
                  "properties": {
                    "target_time": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "Vault": {
          "type": "object",
          "required": [
            "balance",
            "created_at",
            "destinations",
            "id",
            "owner",
            "pair",
            "received_amount",
            "status",
            "swap_amount",
            "swapped_amount",
            "time_interval"
          ],
          "properties": {
            "balance": {
              "$ref": "#/definitions/Coin"
            },
            "created_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "dca_plus_config": {
              "anyOf": [
                {
                  "$ref": "#/definitions/DcaPlusConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "destinations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Destination"
              }
            },
            "id": {
              "$ref": "#/definitions/Uint128"
            },
            "label": {
              "type": [
                "string",
                "null"
              ]
            },
            "minimum_receive_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "pair": {
              "$ref": "#/definitions/Pair"
            },
            "received_amount": {
              "$ref": "#/definitions/Coin"
            },
            "slippage_tolerance": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "started_at": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "$ref": "#/definitions/VaultStatus"
            },
            "swap_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "swapped_amount": {
              "$ref": "#/definitions/Coin"
            },
            "time_interval": {
              "$ref": "#/definitions/TimeInterval"
            },
            "trigger": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TriggerConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "VaultStatus": {
          "type": "string",
          "enum": [
            "scheduled",
            "active",
            "inactive",
            "cancelled"
          ]
        }
      }
    },
    "get_vaults_by_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultsResponse",
      "type": "object",
      "required": [
        "vaults"
      ],
      "properties": {
        "vaults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vault"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "DcaPlusConfig": {
          "type": "object",
          "required": [
            "escrow_level",
            "escrowed_balance",
            "model_id",
            "standard_dca_received_amount",
            "standard_dca_swapped_amount",
            "total_deposit"
          ],
          "properties": {
            "escrow_level": {
              "$ref": "#/definitions/Decimal"
            },
            "escrowed_balance": {
              "$ref": "#/definitions/Coin"
            },
            "model_id": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "standard_dca_received_amount": {
              "$ref": "#/definitions/Coin"
            },
            "standard_dca_swapped_amount": {
              "$ref": "#/definitions/Coin"
            },
            "total_deposit": {
              "$ref": "#/definitions/Coin"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Destination": {
          "type": "object",
          "required": [
            "action",
            "address",
            "allocation"
          ],
          "properties": {
            "action": {
              "$ref": "#/definitions/PostExecutionAction"
            },
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "allocation": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "Duration": {
          "type": "object",
          "required": [
            "nanos",
            "seconds"
          ],
          "properties": {
            "nanos": {
              "description": "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
              "type": "integer",
              "format": "int32"
            },
            "seconds": {
              "description": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "Pair": {
          "type": "object",
          "required": [
            "address",
            "base_denom",
            "quote_denom",
            "route"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "base_denom": {
              "type": "string"
            },
            "quote_denom": {
              "type": "string"
            },
            "route": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        },
        "PostExecutionAction": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "send",
                "z_delegate"
              ]
            },
            {
              "type": "object",
              "required": [
                "z_provide_liquidity"
              ],
              "properties": {
                "z_provide_liquidity": {
                  "type": "object",
                  "required": [
                    "duration",
                    "pool_id"
                  ],
                  "properties": {
                    "duration": {
                      "$ref": "#/definitions/Duration"
                    },
                    "pool_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "TimeInterval": {
          "type": "string",
          "enum": [
            "every_second",
            "every_minute",
            "half_hourly",
            "hourly",
            "half_daily",
            "daily",
            "weekly",
            "fortnightly",
            "monthly"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "TriggerConfiguration": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "object",
                  "required": [
                    "target_time"
                  ],
                  "properties": {
                    "target_time": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "Vault": {
          "type": "object",
          "required": [
            "balance",
            "created_at",
            "destinations",
            "id",
            "owner",
            "pair",
            "received_amount",
            "status",
            "swap_amount",
            "swapped_amount",
            "time_interval"
          ],
          "properties": {
            "balance": {
              "$ref": "#/definitions/Coin"
            },
            "created_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "dca_plus_config": {
              "anyOf": [
                {
                  "$ref": "#/definitions/DcaPlusConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "destinations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Destination"
              }
            },
            "id": {
              "$ref": "#/definitions/Uint128"
            },
            "label": {
              "type": [
                "string",
                "null"
              ]
            },
            "minimum_receive_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "pair": {
              "$ref": "#/definitions/Pair"
            },
            "received_amount": {
              "$ref": "#/definitions/Coin"
            },
            "slippage_tolerance": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "started_at": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "$ref": "#/definitions/VaultStatus"
            },
            "swap_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "swapped_amount": {
              "$ref": "#/definitions/Coin"
            },
            "time_interval": {
              "$ref": "#/definitions/TimeInterval"
            },
            "trigger": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TriggerConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "VaultStatus": {
          "type": "string",
          "enum": [
            "scheduled",
            "active",
            "inactive",
            "cancelled"
          ]
        }
      }
    }
  }
}

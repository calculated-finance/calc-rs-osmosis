{
  "contract_name": "dca",
  "contract_version": "1.0.2",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "admin",
      "automation_fee_percent",
      "default_page_limit",
      "default_slippage_tolerance",
      "default_swap_fee_percent",
      "executors",
      "fee_collectors",
      "paused",
      "risk_weighted_average_escrow_level",
      "twap_period",
      "weighted_scale_swap_fee_percent"
    ],
    "properties": {
      "admin": {
        "$ref": "#/definitions/Addr"
      },
      "automation_fee_percent": {
        "$ref": "#/definitions/Decimal"
      },
      "default_page_limit": {
        "type": "integer",
        "format": "uint16",
        "minimum": 0.0
      },
      "default_slippage_tolerance": {
        "$ref": "#/definitions/Decimal"
      },
      "default_swap_fee_percent": {
        "$ref": "#/definitions/Decimal"
      },
      "executors": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Addr"
        }
      },
      "fee_collectors": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/FeeCollector"
        }
      },
      "paused": {
        "type": "boolean"
      },
      "risk_weighted_average_escrow_level": {
        "$ref": "#/definitions/Decimal"
      },
      "twap_period": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "weighted_scale_swap_fee_percent": {
        "$ref": "#/definitions/Decimal"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "FeeCollector": {
        "type": "object",
        "required": [
          "address",
          "allocation"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "allocation": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create_pair"
        ],
        "properties": {
          "create_pair": {
            "type": "object",
            "required": [
              "base_denom",
              "quote_denom",
              "route"
            ],
            "properties": {
              "base_denom": {
                "type": "string"
              },
              "quote_denom": {
                "type": "string"
              },
              "route": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_vault"
        ],
        "properties": {
          "create_vault": {
            "type": "object",
            "required": [
              "swap_amount",
              "target_denom",
              "time_interval"
            ],
            "properties": {
              "destinations": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/definitions/Destination"
                }
              },
              "label": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "minimum_receive_amount": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "owner": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "performance_assessment_strategy": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PerformanceAssessmentStrategyParams"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "position_type": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PositionType"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "slippage_tolerance": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "swap_adjustment_strategy": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SwapAdjustmentStrategyParams"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "swap_amount": {
                "$ref": "#/definitions/Uint128"
              },
              "target_denom": {
                "type": "string"
              },
              "target_start_time_utc_seconds": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint64"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "time_interval": {
                "$ref": "#/definitions/TimeInterval"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "deposit"
        ],
        "properties": {
          "deposit": {
            "type": "object",
            "required": [
              "address",
              "vault_id"
            ],
            "properties": {
              "address": {
                "$ref": "#/definitions/Addr"
              },
              "vault_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_vault"
        ],
        "properties": {
          "update_vault": {
            "type": "object",
            "required": [
              "vault_id"
            ],
            "properties": {
              "destinations": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/definitions/Destination"
                }
              },
              "label": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "vault_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "cancel_vault"
        ],
        "properties": {
          "cancel_vault": {
            "type": "object",
            "required": [
              "vault_id"
            ],
            "properties": {
              "vault_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "execute_trigger"
        ],
        "properties": {
          "execute_trigger": {
            "type": "object",
            "required": [
              "trigger_id"
            ],
            "properties": {
              "trigger_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "automation_fee_percent": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "default_page_limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              },
              "default_slippage_tolerance": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "default_swap_fee_percent": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "executors": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "fee_collectors": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/definitions/FeeCollector"
                }
              },
              "paused": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "risk_weighted_average_escrow_level": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "twap_period": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "weighted_scale_swap_fee_percent": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_custom_swap_fee"
        ],
        "properties": {
          "create_custom_swap_fee": {
            "type": "object",
            "required": [
              "denom",
              "swap_fee_percent"
            ],
            "properties": {
              "denom": {
                "type": "string"
              },
              "swap_fee_percent": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_custom_swap_fee"
        ],
        "properties": {
          "remove_custom_swap_fee": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_swap_adjustment"
        ],
        "properties": {
          "update_swap_adjustment": {
            "type": "object",
            "required": [
              "strategy",
              "value"
            ],
            "properties": {
              "strategy": {
                "$ref": "#/definitions/SwapAdjustmentStrategy"
              },
              "value": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "disburse_escrow"
        ],
        "properties": {
          "disburse_escrow": {
            "type": "object",
            "required": [
              "vault_id"
            ],
            "properties": {
              "vault_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "z_delegate"
        ],
        "properties": {
          "z_delegate": {
            "type": "object",
            "required": [
              "delegator_address",
              "validator_address"
            ],
            "properties": {
              "delegator_address": {
                "$ref": "#/definitions/Addr"
              },
              "validator_address": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "z_provide_liquidity"
        ],
        "properties": {
          "z_provide_liquidity": {
            "type": "object",
            "required": [
              "duration",
              "pool_id",
              "provider_address"
            ],
            "properties": {
              "duration": {
                "$ref": "#/definitions/LockableDuration"
              },
              "pool_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "provider_address": {
                "$ref": "#/definitions/Addr"
              },
              "slippage_tolerance": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "BaseDenom": {
        "type": "string",
        "enum": [
          "bitcoin"
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Destination": {
        "type": "object",
        "required": [
          "address",
          "allocation"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/Addr"
          },
          "allocation": {
            "$ref": "#/definitions/Decimal"
          },
          "msg": {
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "FeeCollector": {
        "type": "object",
        "required": [
          "address",
          "allocation"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "allocation": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      },
      "LockableDuration": {
        "type": "string",
        "enum": [
          "one_day",
          "one_week",
          "two_weeks"
        ]
      },
      "PerformanceAssessmentStrategyParams": {
        "type": "string",
        "enum": [
          "compare_to_standard_dca"
        ]
      },
      "PositionType": {
        "type": "string",
        "enum": [
          "enter",
          "exit"
        ]
      },
      "SwapAdjustmentStrategy": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "risk_weighted_average"
            ],
            "properties": {
              "risk_weighted_average": {
                "type": "object",
                "required": [
                  "base_denom",
                  "model_id",
                  "position_type"
                ],
                "properties": {
                  "base_denom": {
                    "$ref": "#/definitions/BaseDenom"
                  },
                  "model_id": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  },
                  "position_type": {
                    "$ref": "#/definitions/PositionType"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "weighted_scale"
            ],
            "properties": {
              "weighted_scale": {
                "type": "object",
                "required": [
                  "base_receive_amount",
                  "increase_only",
                  "multiplier"
                ],
                "properties": {
                  "base_receive_amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "increase_only": {
                    "type": "boolean"
                  },
                  "multiplier": {
                    "$ref": "#/definitions/Decimal"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SwapAdjustmentStrategyParams": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "risk_weighted_average"
            ],
            "properties": {
              "risk_weighted_average": {
                "type": "object",
                "required": [
                  "base_denom"
                ],
                "properties": {
                  "base_denom": {
                    "$ref": "#/definitions/BaseDenom"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "weighted_scale"
            ],
            "properties": {
              "weighted_scale": {
                "type": "object",
                "required": [
                  "base_receive_amount",
                  "increase_only",
                  "multiplier"
                ],
                "properties": {
                  "base_receive_amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "increase_only": {
                    "type": "boolean"
                  },
                  "multiplier": {
                    "$ref": "#/definitions/Decimal"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TimeInterval": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "every_second",
              "every_minute",
              "half_hourly",
              "hourly",
              "half_daily",
              "daily",
              "weekly",
              "fortnightly",
              "monthly"
            ]
          },
          {
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "type": "object",
                "required": [
                  "seconds"
                ],
                "properties": {
                  "seconds": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_config"
        ],
        "properties": {
          "get_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_pairs"
        ],
        "properties": {
          "get_pairs": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_time_trigger_ids"
        ],
        "properties": {
          "get_time_trigger_ids": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_vault"
        ],
        "properties": {
          "get_vault": {
            "type": "object",
            "required": [
              "vault_id"
            ],
            "properties": {
              "vault_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_vaults_by_address"
        ],
        "properties": {
          "get_vaults_by_address": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/definitions/Addr"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint128",
                "minimum": 0.0
              },
              "status": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/VaultStatus"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_vaults"
        ],
        "properties": {
          "get_vaults": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint128",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_events_by_resource_id"
        ],
        "properties": {
          "get_events_by_resource_id": {
            "type": "object",
            "required": [
              "resource_id"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              },
              "resource_id": {
                "$ref": "#/definitions/Uint128"
              },
              "reverse": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_events"
        ],
        "properties": {
          "get_events": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              },
              "reverse": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_custom_swap_fees"
        ],
        "properties": {
          "get_custom_swap_fees": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_vault_performance"
        ],
        "properties": {
          "get_vault_performance": {
            "type": "object",
            "required": [
              "vault_id"
            ],
            "properties": {
              "vault_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_disburse_escrow_tasks"
        ],
        "properties": {
          "get_disburse_escrow_tasks": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "VaultStatus": {
        "type": "string",
        "enum": [
          "scheduled",
          "active",
          "inactive",
          "cancelled"
        ]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/Config"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Config": {
          "type": "object",
          "required": [
            "admin",
            "automation_fee_percent",
            "default_page_limit",
            "default_slippage_tolerance",
            "default_swap_fee_percent",
            "executors",
            "fee_collectors",
            "paused",
            "risk_weighted_average_escrow_level",
            "twap_period",
            "weighted_scale_swap_fee_percent"
          ],
          "properties": {
            "admin": {
              "$ref": "#/definitions/Addr"
            },
            "automation_fee_percent": {
              "$ref": "#/definitions/Decimal"
            },
            "default_page_limit": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "default_slippage_tolerance": {
              "$ref": "#/definitions/Decimal"
            },
            "default_swap_fee_percent": {
              "$ref": "#/definitions/Decimal"
            },
            "executors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Addr"
              }
            },
            "fee_collectors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeeCollector"
              }
            },
            "paused": {
              "type": "boolean"
            },
            "risk_weighted_average_escrow_level": {
              "$ref": "#/definitions/Decimal"
            },
            "twap_period": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "weighted_scale_swap_fee_percent": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "FeeCollector": {
          "type": "object",
          "required": [
            "address",
            "allocation"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "allocation": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_custom_swap_fees": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CustomFeesResponse",
      "type": "object",
      "required": [
        "custom_fees"
      ],
      "properties": {
        "custom_fees": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/Decimal"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "get_disburse_escrow_tasks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DisburseEscrowTasksResponse",
      "type": "object",
      "required": [
        "vault_ids"
      ],
      "properties": {
        "vault_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_events": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EventsResponse",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BankMsg": {
          "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
          "oneOf": [
            {
              "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28). `from_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "send"
              ],
              "properties": {
                "send": {
                  "type": "object",
                  "required": [
                    "amount",
                    "to_address"
                  ],
                  "properties": {
                    "amount": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    },
                    "to_address": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "This will burn the given coins from the contract's account. There is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper. Important if a contract controls significant token supply that must be retired.",
              "type": "object",
              "required": [
                "burn"
              ],
              "properties": {
                "burn": {
                  "type": "object",
                  "required": [
                    "amount"
                  ],
                  "properties": {
                    "amount": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "CosmosMsg_for_Empty": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "bank"
              ],
              "properties": {
                "bank": {
                  "$ref": "#/definitions/BankMsg"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "custom"
              ],
              "properties": {
                "custom": {
                  "$ref": "#/definitions/Empty"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "staking"
              ],
              "properties": {
                "staking": {
                  "$ref": "#/definitions/StakingMsg"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "distribution"
              ],
              "properties": {
                "distribution": {
                  "$ref": "#/definitions/DistributionMsg"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A Stargate message encoded the same way as a protobuf [Any](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/any.proto). This is the same structure as messages in `TxBody` from [ADR-020](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-020-protobuf-transaction-encoding.md)",
              "type": "object",
              "required": [
                "stargate"
              ],
              "properties": {
                "stargate": {
                  "type": "object",
                  "required": [
                    "type_url",
                    "value"
                  ],
                  "properties": {
                    "type_url": {
                      "type": "string"
                    },
                    "value": {
                      "$ref": "#/definitions/Binary"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "ibc"
              ],
              "properties": {
                "ibc": {
                  "$ref": "#/definitions/IbcMsg"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "wasm"
              ],
              "properties": {
                "wasm": {
                  "$ref": "#/definitions/WasmMsg"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "gov"
              ],
              "properties": {
                "gov": {
                  "$ref": "#/definitions/GovMsg"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "DistributionMsg": {
          "description": "The message types of the distribution module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto",
          "oneOf": [
            {
              "description": "This is translated to a [MsgSetWithdrawAddress](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L29-L37). `delegator_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "set_withdraw_address"
              ],
              "properties": {
                "set_withdraw_address": {
                  "type": "object",
                  "required": [
                    "address"
                  ],
                  "properties": {
                    "address": {
                      "description": "The `withdraw_address`",
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "This is translated to a [[MsgWithdrawDelegatorReward](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L42-L50). `delegator_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "withdraw_delegator_reward"
              ],
              "properties": {
                "withdraw_delegator_reward": {
                  "type": "object",
                  "required": [
                    "validator"
                  ],
                  "properties": {
                    "validator": {
                      "description": "The `validator_address`",
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Empty": {
          "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
          "type": "object"
        },
        "Event": {
          "type": "object",
          "required": [
            "block_height",
            "data",
            "id",
            "resource_id",
            "timestamp"
          ],
          "properties": {
            "block_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "data": {
              "$ref": "#/definitions/EventData"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "resource_id": {
              "$ref": "#/definitions/Uint128"
            },
            "timestamp": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        "EventData": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "dca_vault_funds_deposited"
              ],
              "properties": {
                "dca_vault_funds_deposited": {
                  "type": "object",
                  "required": [
                    "amount"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_execution_triggered"
              ],
              "properties": {
                "dca_vault_execution_triggered": {
                  "type": "object",
                  "required": [
                    "asset_price",
                    "base_denom",
                    "quote_denom"
                  ],
                  "properties": {
                    "asset_price": {
                      "$ref": "#/definitions/Decimal"
                    },
                    "base_denom": {
                      "type": "string"
                    },
                    "quote_denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_execution_completed"
              ],
              "properties": {
                "dca_vault_execution_completed": {
                  "type": "object",
                  "required": [
                    "fee",
                    "received",
                    "sent"
                  ],
                  "properties": {
                    "fee": {
                      "$ref": "#/definitions/Coin"
                    },
                    "received": {
                      "$ref": "#/definitions/Coin"
                    },
                    "sent": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "simulated_dca_vault_execution_completed"
              ],
              "properties": {
                "simulated_dca_vault_execution_completed": {
                  "type": "object",
                  "required": [
                    "fee",
                    "received",
                    "sent"
                  ],
                  "properties": {
                    "fee": {
                      "$ref": "#/definitions/Coin"
                    },
                    "received": {
                      "$ref": "#/definitions/Coin"
                    },
                    "sent": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_execution_skipped"
              ],
              "properties": {
                "dca_vault_execution_skipped": {
                  "type": "object",
                  "required": [
                    "reason"
                  ],
                  "properties": {
                    "reason": {
                      "$ref": "#/definitions/ExecutionSkippedReason"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "simulated_dca_vault_execution_skipped"
              ],
              "properties": {
                "simulated_dca_vault_execution_skipped": {
                  "type": "object",
                  "required": [
                    "reason"
                  ],
                  "properties": {
                    "reason": {
                      "$ref": "#/definitions/ExecutionSkippedReason"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_cancelled"
              ],
              "properties": {
                "dca_vault_cancelled": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_escrow_disbursed"
              ],
              "properties": {
                "dca_vault_escrow_disbursed": {
                  "type": "object",
                  "required": [
                    "amount_disbursed",
                    "performance_fee"
                  ],
                  "properties": {
                    "amount_disbursed": {
                      "$ref": "#/definitions/Coin"
                    },
                    "performance_fee": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_post_execution_action_failed"
              ],
              "properties": {
                "dca_vault_post_execution_action_failed": {
                  "type": "object",
                  "required": [
                    "funds",
                    "msg"
                  ],
                  "properties": {
                    "funds": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    },
                    "msg": {
                      "$ref": "#/definitions/SubMsg_for_Empty"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ExecutionSkippedReason": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "slippage_tolerance_exceeded",
                "swap_amount_adjusted_to_zero"
              ]
            },
            {
              "type": "object",
              "required": [
                "price_threshold_exceeded"
              ],
              "properties": {
                "price_threshold_exceeded": {
                  "type": "object",
                  "required": [
                    "price"
                  ],
                  "properties": {
                    "price": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "GovMsg": {
          "description": "This message type allows the contract interact with the [x/gov] module in order to cast votes.\n\n[x/gov]: https://github.com/cosmos/cosmos-sdk/tree/v0.45.12/x/gov\n\n## Examples\n\nCast a simple vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); use cosmwasm_std::{GovMsg, VoteOption};\n\n#[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::Vote { proposal_id: 4, vote: VoteOption::Yes, })) } ```\n\nCast a weighted vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); # #[cfg(feature = \"cosmwasm_1_2\")] use cosmwasm_std::{Decimal, GovMsg, VoteOption, WeightedVoteOption};\n\n# #[cfg(feature = \"cosmwasm_1_2\")] #[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::VoteWeighted { proposal_id: 4, options: vec![ WeightedVoteOption { option: VoteOption::Yes, weight: Decimal::percent(65), }, WeightedVoteOption { option: VoteOption::Abstain, weight: Decimal::percent(35), }, ], })) } ```",
          "oneOf": [
            {
              "description": "This maps directly to [MsgVote](https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/gov/v1beta1/tx.proto#L46-L56) in the Cosmos SDK with voter set to the contract address.",
              "type": "object",
              "required": [
                "vote"
              ],
              "properties": {
                "vote": {
                  "type": "object",
                  "required": [
                    "proposal_id",
                    "vote"
                  ],
                  "properties": {
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "vote": {
                      "description": "The vote option.\n\nThis should be called \"option\" for consistency with Cosmos SDK. Sorry for that. See <https://github.com/CosmWasm/cosmwasm/issues/1571>.",
                      "allOf": [
                        {
                          "$ref": "#/definitions/VoteOption"
                        }
                      ]
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "IbcMsg": {
          "description": "These are messages in the IBC lifecycle. Only usable by IBC-enabled contracts (contracts that directly speak the IBC protocol via 6 entry points)",
          "oneOf": [
            {
              "description": "Sends bank tokens owned by the contract to the given address on another chain. The channel must already be established between the ibctransfer module on this chain and a matching module on the remote chain. We cannot select the port_id, this is whatever the local chain has bound the ibctransfer module to.",
              "type": "object",
              "required": [
                "transfer"
              ],
              "properties": {
                "transfer": {
                  "type": "object",
                  "required": [
                    "amount",
                    "channel_id",
                    "timeout",
                    "to_address"
                  ],
                  "properties": {
                    "amount": {
                      "description": "packet data only supports one coin https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/ibc/applications/transfer/v1/transfer.proto#L11-L20",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Coin"
                        }
                      ]
                    },
                    "channel_id": {
                      "description": "exisiting channel to send the tokens over",
                      "type": "string"
                    },
                    "timeout": {
                      "description": "when packet times out, measured on remote chain",
                      "allOf": [
                        {
                          "$ref": "#/definitions/IbcTimeout"
                        }
                      ]
                    },
                    "to_address": {
                      "description": "address on the remote chain to receive these tokens",
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Sends an IBC packet with given data over the existing channel. Data should be encoded in a format defined by the channel version, and the module on the other side should know how to parse this.",
              "type": "object",
              "required": [
                "send_packet"
              ],
              "properties": {
                "send_packet": {
                  "type": "object",
                  "required": [
                    "channel_id",
                    "data",
                    "timeout"
                  ],
                  "properties": {
                    "channel_id": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/definitions/Binary"
                    },
                    "timeout": {
                      "description": "when packet times out, measured on remote chain",
                      "allOf": [
                        {
                          "$ref": "#/definitions/IbcTimeout"
                        }
                      ]
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "This will close an existing channel that is owned by this contract. Port is auto-assigned to the contract's IBC port",
              "type": "object",
              "required": [
                "close_channel"
              ],
              "properties": {
                "close_channel": {
                  "type": "object",
                  "required": [
                    "channel_id"
                  ],
                  "properties": {
                    "channel_id": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "IbcTimeout": {
          "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
          "type": "object",
          "properties": {
            "block": {
              "anyOf": [
                {
                  "$ref": "#/definitions/IbcTimeoutBlock"
                },
                {
                  "type": "null"
                }
              ]
            },
            "timestamp": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "IbcTimeoutBlock": {
          "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
          "type": "object",
          "required": [
            "height",
            "revision"
          ],
          "properties": {
            "height": {
              "description": "block height after which the packet times out. the height within the given revision",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "revision": {
              "description": "the version that the client is currently on (eg. after reseting the chain this could increment 1 as height drops to 0)",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "ReplyOn": {
          "description": "Use this to define when the contract gets a response callback. If you only need it for errors or success you can select just those in order to save gas.",
          "oneOf": [
            {
              "description": "Always perform a callback after SubMsg is processed",
              "type": "string",
              "enum": [
                "always"
              ]
            },
            {
              "description": "Only callback if SubMsg returned an error, no callback on success case",
              "type": "string",
              "enum": [
                "error"
              ]
            },
            {
              "description": "Only callback if SubMsg was successful, no callback on error case",
              "type": "string",
              "enum": [
                "success"
              ]
            },
            {
              "description": "Never make a callback - this is like the original CosmosMsg semantics",
              "type": "string",
              "enum": [
                "never"
              ]
            }
          ]
        },
        "StakingMsg": {
          "description": "The message types of the staking module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto",
          "oneOf": [
            {
              "description": "This is translated to a [MsgDelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L81-L90). `delegator_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "delegate"
              ],
              "properties": {
                "delegate": {
                  "type": "object",
                  "required": [
                    "amount",
                    "validator"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Coin"
                    },
                    "validator": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "This is translated to a [MsgUndelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L112-L121). `delegator_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "undelegate"
              ],
              "properties": {
                "undelegate": {
                  "type": "object",
                  "required": [
                    "amount",
                    "validator"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Coin"
                    },
                    "validator": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "This is translated to a [MsgBeginRedelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L95-L105). `delegator_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "redelegate"
              ],
              "properties": {
                "redelegate": {
                  "type": "object",
                  "required": [
                    "amount",
                    "dst_validator",
                    "src_validator"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Coin"
                    },
                    "dst_validator": {
                      "type": "string"
                    },
                    "src_validator": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "SubMsg_for_Empty": {
          "description": "A submessage that will guarantee a `reply` call on success or error, depending on the `reply_on` setting. If you do not need to process the result, use regular messages instead.\n\nNote: On error the submessage execution will revert any partial state changes due to this message, but not revert any state changes in the calling contract. If this is required, it must be done manually in the `reply` entry point.",
          "type": "object",
          "required": [
            "id",
            "msg",
            "reply_on"
          ],
          "properties": {
            "gas_limit": {
              "description": "Gas limit measured in [Cosmos SDK gas](https://github.com/CosmWasm/cosmwasm/blob/main/docs/GAS.md).",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "id": {
              "description": "An arbitrary ID chosen by the contract. This is typically used to match `Reply`s in the `reply` entry point to the submessage.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "msg": {
              "$ref": "#/definitions/CosmosMsg_for_Empty"
            },
            "reply_on": {
              "$ref": "#/definitions/ReplyOn"
            }
          }
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "VoteOption": {
          "type": "string",
          "enum": [
            "yes",
            "no",
            "abstain",
            "no_with_veto"
          ]
        },
        "WasmMsg": {
          "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
          "oneOf": [
            {
              "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "execute"
              ],
              "properties": {
                "execute": {
                  "type": "object",
                  "required": [
                    "contract_addr",
                    "funds",
                    "msg"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    },
                    "funds": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    },
                    "msg": {
                      "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Binary"
                        }
                      ]
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThe contract address is non-predictable. But it is guaranteed that when emitting the same Instantiate message multiple times, multiple instances on different addresses will be generated. See also Instantiate2.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L53-L71). `sender` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "instantiate"
              ],
              "properties": {
                "instantiate": {
                  "type": "object",
                  "required": [
                    "code_id",
                    "funds",
                    "label",
                    "msg"
                  ],
                  "properties": {
                    "admin": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "code_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "funds": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    },
                    "label": {
                      "description": "A human-readbale label for the contract",
                      "type": "string"
                    },
                    "msg": {
                      "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Binary"
                        }
                      ]
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "migrate"
              ],
              "properties": {
                "migrate": {
                  "type": "object",
                  "required": [
                    "contract_addr",
                    "msg",
                    "new_code_id"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    },
                    "msg": {
                      "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Binary"
                        }
                      ]
                    },
                    "new_code_id": {
                      "description": "the code_id of the new logic to place in the given contract",
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
              "type": "object",
              "required": [
                "update_admin"
              ],
              "properties": {
                "update_admin": {
                  "type": "object",
                  "required": [
                    "admin",
                    "contract_addr"
                  ],
                  "properties": {
                    "admin": {
                      "type": "string"
                    },
                    "contract_addr": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
              "type": "object",
              "required": [
                "clear_admin"
              ],
              "properties": {
                "clear_admin": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "get_events_by_resource_id": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EventsResponse",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BankMsg": {
          "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
          "oneOf": [
            {
              "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28). `from_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "send"
              ],
              "properties": {
                "send": {
                  "type": "object",
                  "required": [
                    "amount",
                    "to_address"
                  ],
                  "properties": {
                    "amount": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    },
                    "to_address": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "This will burn the given coins from the contract's account. There is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper. Important if a contract controls significant token supply that must be retired.",
              "type": "object",
              "required": [
                "burn"
              ],
              "properties": {
                "burn": {
                  "type": "object",
                  "required": [
                    "amount"
                  ],
                  "properties": {
                    "amount": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "CosmosMsg_for_Empty": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "bank"
              ],
              "properties": {
                "bank": {
                  "$ref": "#/definitions/BankMsg"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "custom"
              ],
              "properties": {
                "custom": {
                  "$ref": "#/definitions/Empty"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "staking"
              ],
              "properties": {
                "staking": {
                  "$ref": "#/definitions/StakingMsg"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "distribution"
              ],
              "properties": {
                "distribution": {
                  "$ref": "#/definitions/DistributionMsg"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A Stargate message encoded the same way as a protobuf [Any](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/any.proto). This is the same structure as messages in `TxBody` from [ADR-020](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-020-protobuf-transaction-encoding.md)",
              "type": "object",
              "required": [
                "stargate"
              ],
              "properties": {
                "stargate": {
                  "type": "object",
                  "required": [
                    "type_url",
                    "value"
                  ],
                  "properties": {
                    "type_url": {
                      "type": "string"
                    },
                    "value": {
                      "$ref": "#/definitions/Binary"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "ibc"
              ],
              "properties": {
                "ibc": {
                  "$ref": "#/definitions/IbcMsg"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "wasm"
              ],
              "properties": {
                "wasm": {
                  "$ref": "#/definitions/WasmMsg"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "gov"
              ],
              "properties": {
                "gov": {
                  "$ref": "#/definitions/GovMsg"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "DistributionMsg": {
          "description": "The message types of the distribution module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto",
          "oneOf": [
            {
              "description": "This is translated to a [MsgSetWithdrawAddress](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L29-L37). `delegator_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "set_withdraw_address"
              ],
              "properties": {
                "set_withdraw_address": {
                  "type": "object",
                  "required": [
                    "address"
                  ],
                  "properties": {
                    "address": {
                      "description": "The `withdraw_address`",
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "This is translated to a [[MsgWithdrawDelegatorReward](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L42-L50). `delegator_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "withdraw_delegator_reward"
              ],
              "properties": {
                "withdraw_delegator_reward": {
                  "type": "object",
                  "required": [
                    "validator"
                  ],
                  "properties": {
                    "validator": {
                      "description": "The `validator_address`",
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Empty": {
          "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
          "type": "object"
        },
        "Event": {
          "type": "object",
          "required": [
            "block_height",
            "data",
            "id",
            "resource_id",
            "timestamp"
          ],
          "properties": {
            "block_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "data": {
              "$ref": "#/definitions/EventData"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "resource_id": {
              "$ref": "#/definitions/Uint128"
            },
            "timestamp": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        "EventData": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "dca_vault_funds_deposited"
              ],
              "properties": {
                "dca_vault_funds_deposited": {
                  "type": "object",
                  "required": [
                    "amount"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_execution_triggered"
              ],
              "properties": {
                "dca_vault_execution_triggered": {
                  "type": "object",
                  "required": [
                    "asset_price",
                    "base_denom",
                    "quote_denom"
                  ],
                  "properties": {
                    "asset_price": {
                      "$ref": "#/definitions/Decimal"
                    },
                    "base_denom": {
                      "type": "string"
                    },
                    "quote_denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_execution_completed"
              ],
              "properties": {
                "dca_vault_execution_completed": {
                  "type": "object",
                  "required": [
                    "fee",
                    "received",
                    "sent"
                  ],
                  "properties": {
                    "fee": {
                      "$ref": "#/definitions/Coin"
                    },
                    "received": {
                      "$ref": "#/definitions/Coin"
                    },
                    "sent": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "simulated_dca_vault_execution_completed"
              ],
              "properties": {
                "simulated_dca_vault_execution_completed": {
                  "type": "object",
                  "required": [
                    "fee",
                    "received",
                    "sent"
                  ],
                  "properties": {
                    "fee": {
                      "$ref": "#/definitions/Coin"
                    },
                    "received": {
                      "$ref": "#/definitions/Coin"
                    },
                    "sent": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_execution_skipped"
              ],
              "properties": {
                "dca_vault_execution_skipped": {
                  "type": "object",
                  "required": [
                    "reason"
                  ],
                  "properties": {
                    "reason": {
                      "$ref": "#/definitions/ExecutionSkippedReason"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "simulated_dca_vault_execution_skipped"
              ],
              "properties": {
                "simulated_dca_vault_execution_skipped": {
                  "type": "object",
                  "required": [
                    "reason"
                  ],
                  "properties": {
                    "reason": {
                      "$ref": "#/definitions/ExecutionSkippedReason"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_cancelled"
              ],
              "properties": {
                "dca_vault_cancelled": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_escrow_disbursed"
              ],
              "properties": {
                "dca_vault_escrow_disbursed": {
                  "type": "object",
                  "required": [
                    "amount_disbursed",
                    "performance_fee"
                  ],
                  "properties": {
                    "amount_disbursed": {
                      "$ref": "#/definitions/Coin"
                    },
                    "performance_fee": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dca_vault_post_execution_action_failed"
              ],
              "properties": {
                "dca_vault_post_execution_action_failed": {
                  "type": "object",
                  "required": [
                    "funds",
                    "msg"
                  ],
                  "properties": {
                    "funds": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    },
                    "msg": {
                      "$ref": "#/definitions/SubMsg_for_Empty"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ExecutionSkippedReason": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "slippage_tolerance_exceeded",
                "swap_amount_adjusted_to_zero"
              ]
            },
            {
              "type": "object",
              "required": [
                "price_threshold_exceeded"
              ],
              "properties": {
                "price_threshold_exceeded": {
                  "type": "object",
                  "required": [
                    "price"
                  ],
                  "properties": {
                    "price": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "GovMsg": {
          "description": "This message type allows the contract interact with the [x/gov] module in order to cast votes.\n\n[x/gov]: https://github.com/cosmos/cosmos-sdk/tree/v0.45.12/x/gov\n\n## Examples\n\nCast a simple vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); use cosmwasm_std::{GovMsg, VoteOption};\n\n#[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::Vote { proposal_id: 4, vote: VoteOption::Yes, })) } ```\n\nCast a weighted vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); # #[cfg(feature = \"cosmwasm_1_2\")] use cosmwasm_std::{Decimal, GovMsg, VoteOption, WeightedVoteOption};\n\n# #[cfg(feature = \"cosmwasm_1_2\")] #[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::VoteWeighted { proposal_id: 4, options: vec![ WeightedVoteOption { option: VoteOption::Yes, weight: Decimal::percent(65), }, WeightedVoteOption { option: VoteOption::Abstain, weight: Decimal::percent(35), }, ], })) } ```",
          "oneOf": [
            {
              "description": "This maps directly to [MsgVote](https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/gov/v1beta1/tx.proto#L46-L56) in the Cosmos SDK with voter set to the contract address.",
              "type": "object",
              "required": [
                "vote"
              ],
              "properties": {
                "vote": {
                  "type": "object",
                  "required": [
                    "proposal_id",
                    "vote"
                  ],
                  "properties": {
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "vote": {
                      "description": "The vote option.\n\nThis should be called \"option\" for consistency with Cosmos SDK. Sorry for that. See <https://github.com/CosmWasm/cosmwasm/issues/1571>.",
                      "allOf": [
                        {
                          "$ref": "#/definitions/VoteOption"
                        }
                      ]
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "IbcMsg": {
          "description": "These are messages in the IBC lifecycle. Only usable by IBC-enabled contracts (contracts that directly speak the IBC protocol via 6 entry points)",
          "oneOf": [
            {
              "description": "Sends bank tokens owned by the contract to the given address on another chain. The channel must already be established between the ibctransfer module on this chain and a matching module on the remote chain. We cannot select the port_id, this is whatever the local chain has bound the ibctransfer module to.",
              "type": "object",
              "required": [
                "transfer"
              ],
              "properties": {
                "transfer": {
                  "type": "object",
                  "required": [
                    "amount",
                    "channel_id",
                    "timeout",
                    "to_address"
                  ],
                  "properties": {
                    "amount": {
                      "description": "packet data only supports one coin https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/ibc/applications/transfer/v1/transfer.proto#L11-L20",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Coin"
                        }
                      ]
                    },
                    "channel_id": {
                      "description": "exisiting channel to send the tokens over",
                      "type": "string"
                    },
                    "timeout": {
                      "description": "when packet times out, measured on remote chain",
                      "allOf": [
                        {
                          "$ref": "#/definitions/IbcTimeout"
                        }
                      ]
                    },
                    "to_address": {
                      "description": "address on the remote chain to receive these tokens",
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Sends an IBC packet with given data over the existing channel. Data should be encoded in a format defined by the channel version, and the module on the other side should know how to parse this.",
              "type": "object",
              "required": [
                "send_packet"
              ],
              "properties": {
                "send_packet": {
                  "type": "object",
                  "required": [
                    "channel_id",
                    "data",
                    "timeout"
                  ],
                  "properties": {
                    "channel_id": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/definitions/Binary"
                    },
                    "timeout": {
                      "description": "when packet times out, measured on remote chain",
                      "allOf": [
                        {
                          "$ref": "#/definitions/IbcTimeout"
                        }
                      ]
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "This will close an existing channel that is owned by this contract. Port is auto-assigned to the contract's IBC port",
              "type": "object",
              "required": [
                "close_channel"
              ],
              "properties": {
                "close_channel": {
                  "type": "object",
                  "required": [
                    "channel_id"
                  ],
                  "properties": {
                    "channel_id": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "IbcTimeout": {
          "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
          "type": "object",
          "properties": {
            "block": {
              "anyOf": [
                {
                  "$ref": "#/definitions/IbcTimeoutBlock"
                },
                {
                  "type": "null"
                }
              ]
            },
            "timestamp": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "IbcTimeoutBlock": {
          "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
          "type": "object",
          "required": [
            "height",
            "revision"
          ],
          "properties": {
            "height": {
              "description": "block height after which the packet times out. the height within the given revision",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "revision": {
              "description": "the version that the client is currently on (eg. after reseting the chain this could increment 1 as height drops to 0)",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "ReplyOn": {
          "description": "Use this to define when the contract gets a response callback. If you only need it for errors or success you can select just those in order to save gas.",
          "oneOf": [
            {
              "description": "Always perform a callback after SubMsg is processed",
              "type": "string",
              "enum": [
                "always"
              ]
            },
            {
              "description": "Only callback if SubMsg returned an error, no callback on success case",
              "type": "string",
              "enum": [
                "error"
              ]
            },
            {
              "description": "Only callback if SubMsg was successful, no callback on error case",
              "type": "string",
              "enum": [
                "success"
              ]
            },
            {
              "description": "Never make a callback - this is like the original CosmosMsg semantics",
              "type": "string",
              "enum": [
                "never"
              ]
            }
          ]
        },
        "StakingMsg": {
          "description": "The message types of the staking module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto",
          "oneOf": [
            {
              "description": "This is translated to a [MsgDelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L81-L90). `delegator_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "delegate"
              ],
              "properties": {
                "delegate": {
                  "type": "object",
                  "required": [
                    "amount",
                    "validator"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Coin"
                    },
                    "validator": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "This is translated to a [MsgUndelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L112-L121). `delegator_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "undelegate"
              ],
              "properties": {
                "undelegate": {
                  "type": "object",
                  "required": [
                    "amount",
                    "validator"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Coin"
                    },
                    "validator": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "This is translated to a [MsgBeginRedelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L95-L105). `delegator_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "redelegate"
              ],
              "properties": {
                "redelegate": {
                  "type": "object",
                  "required": [
                    "amount",
                    "dst_validator",
                    "src_validator"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Coin"
                    },
                    "dst_validator": {
                      "type": "string"
                    },
                    "src_validator": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "SubMsg_for_Empty": {
          "description": "A submessage that will guarantee a `reply` call on success or error, depending on the `reply_on` setting. If you do not need to process the result, use regular messages instead.\n\nNote: On error the submessage execution will revert any partial state changes due to this message, but not revert any state changes in the calling contract. If this is required, it must be done manually in the `reply` entry point.",
          "type": "object",
          "required": [
            "id",
            "msg",
            "reply_on"
          ],
          "properties": {
            "gas_limit": {
              "description": "Gas limit measured in [Cosmos SDK gas](https://github.com/CosmWasm/cosmwasm/blob/main/docs/GAS.md).",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "id": {
              "description": "An arbitrary ID chosen by the contract. This is typically used to match `Reply`s in the `reply` entry point to the submessage.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "msg": {
              "$ref": "#/definitions/CosmosMsg_for_Empty"
            },
            "reply_on": {
              "$ref": "#/definitions/ReplyOn"
            }
          }
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "VoteOption": {
          "type": "string",
          "enum": [
            "yes",
            "no",
            "abstain",
            "no_with_veto"
          ]
        },
        "WasmMsg": {
          "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
          "oneOf": [
            {
              "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "execute"
              ],
              "properties": {
                "execute": {
                  "type": "object",
                  "required": [
                    "contract_addr",
                    "funds",
                    "msg"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    },
                    "funds": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    },
                    "msg": {
                      "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Binary"
                        }
                      ]
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThe contract address is non-predictable. But it is guaranteed that when emitting the same Instantiate message multiple times, multiple instances on different addresses will be generated. See also Instantiate2.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L53-L71). `sender` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "instantiate"
              ],
              "properties": {
                "instantiate": {
                  "type": "object",
                  "required": [
                    "code_id",
                    "funds",
                    "label",
                    "msg"
                  ],
                  "properties": {
                    "admin": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "code_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "funds": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    },
                    "label": {
                      "description": "A human-readbale label for the contract",
                      "type": "string"
                    },
                    "msg": {
                      "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Binary"
                        }
                      ]
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "migrate"
              ],
              "properties": {
                "migrate": {
                  "type": "object",
                  "required": [
                    "contract_addr",
                    "msg",
                    "new_code_id"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    },
                    "msg": {
                      "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Binary"
                        }
                      ]
                    },
                    "new_code_id": {
                      "description": "the code_id of the new logic to place in the given contract",
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
              "type": "object",
              "required": [
                "update_admin"
              ],
              "properties": {
                "update_admin": {
                  "type": "object",
                  "required": [
                    "admin",
                    "contract_addr"
                  ],
                  "properties": {
                    "admin": {
                      "type": "string"
                    },
                    "contract_addr": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
              "type": "object",
              "required": [
                "clear_admin"
              ],
              "properties": {
                "clear_admin": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "get_pairs": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PairsResponse",
      "type": "object",
      "required": [
        "pairs"
      ],
      "properties": {
        "pairs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pair"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Pair": {
          "type": "object",
          "required": [
            "base_denom",
            "quote_denom",
            "route"
          ],
          "properties": {
            "base_denom": {
              "type": "string"
            },
            "quote_denom": {
              "type": "string"
            },
            "route": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_time_trigger_ids": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TriggerIdsResponse",
      "type": "object",
      "required": [
        "trigger_ids"
      ],
      "properties": {
        "trigger_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_vault": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultResponse",
      "type": "object",
      "required": [
        "vault"
      ],
      "properties": {
        "vault": {
          "$ref": "#/definitions/Vault"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "BaseDenom": {
          "type": "string",
          "enum": [
            "bitcoin"
          ]
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Destination": {
          "type": "object",
          "required": [
            "address",
            "allocation"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "allocation": {
              "$ref": "#/definitions/Decimal"
            },
            "msg": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "PerformanceAssessmentStrategy": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "compare_to_standard_dca"
              ],
              "properties": {
                "compare_to_standard_dca": {
                  "type": "object",
                  "required": [
                    "received_amount",
                    "swapped_amount"
                  ],
                  "properties": {
                    "received_amount": {
                      "$ref": "#/definitions/Coin"
                    },
                    "swapped_amount": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PositionType": {
          "type": "string",
          "enum": [
            "enter",
            "exit"
          ]
        },
        "SwapAdjustmentStrategy": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "risk_weighted_average"
              ],
              "properties": {
                "risk_weighted_average": {
                  "type": "object",
                  "required": [
                    "base_denom",
                    "model_id",
                    "position_type"
                  ],
                  "properties": {
                    "base_denom": {
                      "$ref": "#/definitions/BaseDenom"
                    },
                    "model_id": {
                      "type": "integer",
                      "format": "uint8",
                      "minimum": 0.0
                    },
                    "position_type": {
                      "$ref": "#/definitions/PositionType"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "weighted_scale"
              ],
              "properties": {
                "weighted_scale": {
                  "type": "object",
                  "required": [
                    "base_receive_amount",
                    "increase_only",
                    "multiplier"
                  ],
                  "properties": {
                    "base_receive_amount": {
                      "$ref": "#/definitions/Uint128"
                    },
                    "increase_only": {
                      "type": "boolean"
                    },
                    "multiplier": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "TimeInterval": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "every_second",
                "every_minute",
                "half_hourly",
                "hourly",
                "half_daily",
                "daily",
                "weekly",
                "fortnightly",
                "monthly"
              ]
            },
            {
              "type": "object",
              "required": [
                "custom"
              ],
              "properties": {
                "custom": {
                  "type": "object",
                  "required": [
                    "seconds"
                  ],
                  "properties": {
                    "seconds": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "TriggerConfiguration": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "object",
                  "required": [
                    "target_time"
                  ],
                  "properties": {
                    "target_time": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "Vault": {
          "type": "object",
          "required": [
            "balance",
            "created_at",
            "deposited_amount",
            "destinations",
            "escrow_level",
            "escrowed_amount",
            "id",
            "owner",
            "received_amount",
            "slippage_tolerance",
            "status",
            "swap_amount",
            "swapped_amount",
            "target_denom",
            "time_interval"
          ],
          "properties": {
            "balance": {
              "$ref": "#/definitions/Coin"
            },
            "created_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "deposited_amount": {
              "$ref": "#/definitions/Coin"
            },
            "destinations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Destination"
              }
            },
            "escrow_level": {
              "$ref": "#/definitions/Decimal"
            },
            "escrowed_amount": {
              "$ref": "#/definitions/Coin"
            },
            "id": {
              "$ref": "#/definitions/Uint128"
            },
            "label": {
              "type": [
                "string",
                "null"
              ]
            },
            "minimum_receive_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "performance_assessment_strategy": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PerformanceAssessmentStrategy"
                },
                {
                  "type": "null"
                }
              ]
            },
            "received_amount": {
              "$ref": "#/definitions/Coin"
            },
            "slippage_tolerance": {
              "$ref": "#/definitions/Decimal"
            },
            "started_at": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "$ref": "#/definitions/VaultStatus"
            },
            "swap_adjustment_strategy": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SwapAdjustmentStrategy"
                },
                {
                  "type": "null"
                }
              ]
            },
            "swap_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "swapped_amount": {
              "$ref": "#/definitions/Coin"
            },
            "target_denom": {
              "type": "string"
            },
            "time_interval": {
              "$ref": "#/definitions/TimeInterval"
            },
            "trigger": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TriggerConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "VaultStatus": {
          "type": "string",
          "enum": [
            "scheduled",
            "active",
            "inactive",
            "cancelled"
          ]
        }
      }
    },
    "get_vault_performance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultPerformanceResponse",
      "type": "object",
      "required": [
        "factor",
        "fee"
      ],
      "properties": {
        "factor": {
          "$ref": "#/definitions/Decimal"
        },
        "fee": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_vaults": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultsResponse",
      "type": "object",
      "required": [
        "vaults"
      ],
      "properties": {
        "vaults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vault"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "BaseDenom": {
          "type": "string",
          "enum": [
            "bitcoin"
          ]
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Destination": {
          "type": "object",
          "required": [
            "address",
            "allocation"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "allocation": {
              "$ref": "#/definitions/Decimal"
            },
            "msg": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "PerformanceAssessmentStrategy": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "compare_to_standard_dca"
              ],
              "properties": {
                "compare_to_standard_dca": {
                  "type": "object",
                  "required": [
                    "received_amount",
                    "swapped_amount"
                  ],
                  "properties": {
                    "received_amount": {
                      "$ref": "#/definitions/Coin"
                    },
                    "swapped_amount": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PositionType": {
          "type": "string",
          "enum": [
            "enter",
            "exit"
          ]
        },
        "SwapAdjustmentStrategy": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "risk_weighted_average"
              ],
              "properties": {
                "risk_weighted_average": {
                  "type": "object",
                  "required": [
                    "base_denom",
                    "model_id",
                    "position_type"
                  ],
                  "properties": {
                    "base_denom": {
                      "$ref": "#/definitions/BaseDenom"
                    },
                    "model_id": {
                      "type": "integer",
                      "format": "uint8",
                      "minimum": 0.0
                    },
                    "position_type": {
                      "$ref": "#/definitions/PositionType"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "weighted_scale"
              ],
              "properties": {
                "weighted_scale": {
                  "type": "object",
                  "required": [
                    "base_receive_amount",
                    "increase_only",
                    "multiplier"
                  ],
                  "properties": {
                    "base_receive_amount": {
                      "$ref": "#/definitions/Uint128"
                    },
                    "increase_only": {
                      "type": "boolean"
                    },
                    "multiplier": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "TimeInterval": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "every_second",
                "every_minute",
                "half_hourly",
                "hourly",
                "half_daily",
                "daily",
                "weekly",
                "fortnightly",
                "monthly"
              ]
            },
            {
              "type": "object",
              "required": [
                "custom"
              ],
              "properties": {
                "custom": {
                  "type": "object",
                  "required": [
                    "seconds"
                  ],
                  "properties": {
                    "seconds": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "TriggerConfiguration": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "object",
                  "required": [
                    "target_time"
                  ],
                  "properties": {
                    "target_time": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "Vault": {
          "type": "object",
          "required": [
            "balance",
            "created_at",
            "deposited_amount",
            "destinations",
            "escrow_level",
            "escrowed_amount",
            "id",
            "owner",
            "received_amount",
            "slippage_tolerance",
            "status",
            "swap_amount",
            "swapped_amount",
            "target_denom",
            "time_interval"
          ],
          "properties": {
            "balance": {
              "$ref": "#/definitions/Coin"
            },
            "created_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "deposited_amount": {
              "$ref": "#/definitions/Coin"
            },
            "destinations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Destination"
              }
            },
            "escrow_level": {
              "$ref": "#/definitions/Decimal"
            },
            "escrowed_amount": {
              "$ref": "#/definitions/Coin"
            },
            "id": {
              "$ref": "#/definitions/Uint128"
            },
            "label": {
              "type": [
                "string",
                "null"
              ]
            },
            "minimum_receive_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "performance_assessment_strategy": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PerformanceAssessmentStrategy"
                },
                {
                  "type": "null"
                }
              ]
            },
            "received_amount": {
              "$ref": "#/definitions/Coin"
            },
            "slippage_tolerance": {
              "$ref": "#/definitions/Decimal"
            },
            "started_at": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "$ref": "#/definitions/VaultStatus"
            },
            "swap_adjustment_strategy": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SwapAdjustmentStrategy"
                },
                {
                  "type": "null"
                }
              ]
            },
            "swap_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "swapped_amount": {
              "$ref": "#/definitions/Coin"
            },
            "target_denom": {
              "type": "string"
            },
            "time_interval": {
              "$ref": "#/definitions/TimeInterval"
            },
            "trigger": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TriggerConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "VaultStatus": {
          "type": "string",
          "enum": [
            "scheduled",
            "active",
            "inactive",
            "cancelled"
          ]
        }
      }
    },
    "get_vaults_by_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultsResponse",
      "type": "object",
      "required": [
        "vaults"
      ],
      "properties": {
        "vaults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vault"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "BaseDenom": {
          "type": "string",
          "enum": [
            "bitcoin"
          ]
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Destination": {
          "type": "object",
          "required": [
            "address",
            "allocation"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "allocation": {
              "$ref": "#/definitions/Decimal"
            },
            "msg": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "PerformanceAssessmentStrategy": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "compare_to_standard_dca"
              ],
              "properties": {
                "compare_to_standard_dca": {
                  "type": "object",
                  "required": [
                    "received_amount",
                    "swapped_amount"
                  ],
                  "properties": {
                    "received_amount": {
                      "$ref": "#/definitions/Coin"
                    },
                    "swapped_amount": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PositionType": {
          "type": "string",
          "enum": [
            "enter",
            "exit"
          ]
        },
        "SwapAdjustmentStrategy": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "risk_weighted_average"
              ],
              "properties": {
                "risk_weighted_average": {
                  "type": "object",
                  "required": [
                    "base_denom",
                    "model_id",
                    "position_type"
                  ],
                  "properties": {
                    "base_denom": {
                      "$ref": "#/definitions/BaseDenom"
                    },
                    "model_id": {
                      "type": "integer",
                      "format": "uint8",
                      "minimum": 0.0
                    },
                    "position_type": {
                      "$ref": "#/definitions/PositionType"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "weighted_scale"
              ],
              "properties": {
                "weighted_scale": {
                  "type": "object",
                  "required": [
                    "base_receive_amount",
                    "increase_only",
                    "multiplier"
                  ],
                  "properties": {
                    "base_receive_amount": {
                      "$ref": "#/definitions/Uint128"
                    },
                    "increase_only": {
                      "type": "boolean"
                    },
                    "multiplier": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "TimeInterval": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "every_second",
                "every_minute",
                "half_hourly",
                "hourly",
                "half_daily",
                "daily",
                "weekly",
                "fortnightly",
                "monthly"
              ]
            },
            {
              "type": "object",
              "required": [
                "custom"
              ],
              "properties": {
                "custom": {
                  "type": "object",
                  "required": [
                    "seconds"
                  ],
                  "properties": {
                    "seconds": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "TriggerConfiguration": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "object",
                  "required": [
                    "target_time"
                  ],
                  "properties": {
                    "target_time": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "Vault": {
          "type": "object",
          "required": [
            "balance",
            "created_at",
            "deposited_amount",
            "destinations",
            "escrow_level",
            "escrowed_amount",
            "id",
            "owner",
            "received_amount",
            "slippage_tolerance",
            "status",
            "swap_amount",
            "swapped_amount",
            "target_denom",
            "time_interval"
          ],
          "properties": {
            "balance": {
              "$ref": "#/definitions/Coin"
            },
            "created_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "deposited_amount": {
              "$ref": "#/definitions/Coin"
            },
            "destinations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Destination"
              }
            },
            "escrow_level": {
              "$ref": "#/definitions/Decimal"
            },
            "escrowed_amount": {
              "$ref": "#/definitions/Coin"
            },
            "id": {
              "$ref": "#/definitions/Uint128"
            },
            "label": {
              "type": [
                "string",
                "null"
              ]
            },
            "minimum_receive_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "performance_assessment_strategy": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PerformanceAssessmentStrategy"
                },
                {
                  "type": "null"
                }
              ]
            },
            "received_amount": {
              "$ref": "#/definitions/Coin"
            },
            "slippage_tolerance": {
              "$ref": "#/definitions/Decimal"
            },
            "started_at": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "$ref": "#/definitions/VaultStatus"
            },
            "swap_adjustment_strategy": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SwapAdjustmentStrategy"
                },
                {
                  "type": "null"
                }
              ]
            },
            "swap_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "swapped_amount": {
              "$ref": "#/definitions/Coin"
            },
            "target_denom": {
              "type": "string"
            },
            "time_interval": {
              "$ref": "#/definitions/TimeInterval"
            },
            "trigger": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TriggerConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "VaultStatus": {
          "type": "string",
          "enum": [
            "scheduled",
            "active",
            "inactive",
            "cancelled"
          ]
        }
      }
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "create_pair"
      ],
      "properties": {
        "create_pair": {
          "type": "object",
          "required": [
            "base_denom",
            "quote_denom",
            "route"
          ],
          "properties": {
            "base_denom": {
              "type": "string"
            },
            "quote_denom": {
              "type": "string"
            },
            "route": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_vault"
      ],
      "properties": {
        "create_vault": {
          "type": "object",
          "required": [
            "swap_amount",
            "target_denom",
            "time_interval"
          ],
          "properties": {
            "destinations": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Destination"
              }
            },
            "label": {
              "type": [
                "string",
                "null"
              ]
            },
            "minimum_receive_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "owner": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "performance_assessment_strategy": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PerformanceAssessmentStrategyParams"
                },
                {
                  "type": "null"
                }
              ]
            },
            "position_type": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PositionType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "slippage_tolerance": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "swap_adjustment_strategy": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SwapAdjustmentStrategyParams"
                },
                {
                  "type": "null"
                }
              ]
            },
            "swap_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "target_denom": {
              "type": "string"
            },
            "target_start_time_utc_seconds": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint64"
                },
                {
                  "type": "null"
                }
              ]
            },
            "time_interval": {
              "$ref": "#/definitions/TimeInterval"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "deposit"
      ],
      "properties": {
        "deposit": {
          "type": "object",
          "required": [
            "address",
            "vault_id"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "vault_id": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_vault"
      ],
      "properties": {
        "update_vault": {
          "type": "object",
          "required": [
            "vault_id"
          ],
          "properties": {
            "label": {
              "type": [
                "string",
                "null"
              ]
            },
            "vault_id": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "cancel_vault"
      ],
      "properties": {
        "cancel_vault": {
          "type": "object",
          "required": [
            "vault_id"
          ],
          "properties": {
            "vault_id": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "execute_trigger"
      ],
      "properties": {
        "execute_trigger": {
          "type": "object",
          "required": [
            "trigger_id"
          ],
          "properties": {
            "trigger_id": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "delegation_fee_percent": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "executors": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Addr"
              }
            },
            "fee_collectors": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/FeeCollector"
              }
            },
            "page_limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint16",
              "minimum": 0.0
            },
            "paused": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "risk_weighted_average_escrow_level": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "swap_fee_percent": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_custom_swap_fee"
      ],
      "properties": {
        "create_custom_swap_fee": {
          "type": "object",
          "required": [
            "denom",
            "swap_fee_percent"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "swap_fee_percent": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_custom_swap_fee"
      ],
      "properties": {
        "remove_custom_swap_fee": {
          "type": "object",
          "required": [
            "denom"
          ],
          "properties": {
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_swap_adjustment"
      ],
      "properties": {
        "update_swap_adjustment": {
          "type": "object",
          "required": [
            "strategy",
            "value"
          ],
          "properties": {
            "strategy": {
              "$ref": "#/definitions/SwapAdjustmentStrategy"
            },
            "value": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "disburse_escrow"
      ],
      "properties": {
        "disburse_escrow": {
          "type": "object",
          "required": [
            "vault_id"
          ],
          "properties": {
            "vault_id": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "z_delegate"
      ],
      "properties": {
        "z_delegate": {
          "type": "object",
          "required": [
            "delegator_address",
            "validator_address"
          ],
          "properties": {
            "delegator_address": {
              "$ref": "#/definitions/Addr"
            },
            "validator_address": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "z_provide_liquidity"
      ],
      "properties": {
        "z_provide_liquidity": {
          "type": "object",
          "required": [
            "duration",
            "pool_id",
            "provider_address"
          ],
          "properties": {
            "duration": {
              "$ref": "#/definitions/LockableDuration"
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "provider_address": {
              "$ref": "#/definitions/Addr"
            },
            "slippage_tolerance": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "BaseDenom": {
      "type": "string",
      "enum": [
        "bitcoin"
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Destination": {
      "type": "object",
      "required": [
        "address",
        "allocation"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "allocation": {
          "$ref": "#/definitions/Decimal"
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "FeeCollector": {
      "type": "object",
      "required": [
        "address",
        "allocation"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "allocation": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "LockableDuration": {
      "type": "string",
      "enum": [
        "one_day",
        "one_week",
        "two_weeks"
      ]
    },
    "PerformanceAssessmentStrategyParams": {
      "type": "string",
      "enum": [
        "compare_to_standard_dca"
      ]
    },
    "PositionType": {
      "type": "string",
      "enum": [
        "enter",
        "exit"
      ]
    },
    "SwapAdjustmentStrategy": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "risk_weighted_average"
          ],
          "properties": {
            "risk_weighted_average": {
              "type": "object",
              "required": [
                "base_denom",
                "model_id",
                "position_type"
              ],
              "properties": {
                "base_denom": {
                  "$ref": "#/definitions/BaseDenom"
                },
                "model_id": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "position_type": {
                  "$ref": "#/definitions/PositionType"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "weighted_scale"
          ],
          "properties": {
            "weighted_scale": {
              "type": "object",
              "required": [
                "base_receive_amount",
                "increase_only",
                "multiplier"
              ],
              "properties": {
                "base_receive_amount": {
                  "$ref": "#/definitions/Uint128"
                },
                "increase_only": {
                  "type": "boolean"
                },
                "multiplier": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SwapAdjustmentStrategyParams": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "risk_weighted_average"
          ],
          "properties": {
            "risk_weighted_average": {
              "type": "object",
              "required": [
                "base_denom"
              ],
              "properties": {
                "base_denom": {
                  "$ref": "#/definitions/BaseDenom"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "weighted_scale"
          ],
          "properties": {
            "weighted_scale": {
              "type": "object",
              "required": [
                "base_receive_amount",
                "increase_only",
                "multiplier"
              ],
              "properties": {
                "base_receive_amount": {
                  "$ref": "#/definitions/Uint128"
                },
                "increase_only": {
                  "type": "boolean"
                },
                "multiplier": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TimeInterval": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "every_second",
            "every_minute",
            "half_hourly",
            "hourly",
            "half_daily",
            "daily",
            "weekly",
            "fortnightly",
            "monthly"
          ]
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "type": "object",
              "required": [
                "seconds"
              ],
              "properties": {
                "seconds": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "EventsResponse",
  "type": "object",
  "required": [
    "events"
  ],
  "properties": {
    "events": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Event"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Event": {
      "type": "object",
      "required": [
        "block_height",
        "data",
        "id",
        "resource_id",
        "timestamp"
      ],
      "properties": {
        "block_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "data": {
          "$ref": "#/definitions/EventData"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "resource_id": {
          "$ref": "#/definitions/Uint128"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      },
      "additionalProperties": false
    },
    "EventData": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "dca_vault_funds_deposited"
          ],
          "properties": {
            "dca_vault_funds_deposited": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "dca_vault_execution_triggered"
          ],
          "properties": {
            "dca_vault_execution_triggered": {
              "type": "object",
              "required": [
                "asset_price",
                "base_denom",
                "quote_denom"
              ],
              "properties": {
                "asset_price": {
                  "$ref": "#/definitions/Decimal"
                },
                "base_denom": {
                  "type": "string"
                },
                "quote_denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "dca_vault_execution_completed"
          ],
          "properties": {
            "dca_vault_execution_completed": {
              "type": "object",
              "required": [
                "fee",
                "received",
                "sent"
              ],
              "properties": {
                "fee": {
                  "$ref": "#/definitions/Coin"
                },
                "received": {
                  "$ref": "#/definitions/Coin"
                },
                "sent": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "simulated_dca_vault_execution_completed"
          ],
          "properties": {
            "simulated_dca_vault_execution_completed": {
              "type": "object",
              "required": [
                "fee",
                "received",
                "sent"
              ],
              "properties": {
                "fee": {
                  "$ref": "#/definitions/Coin"
                },
                "received": {
                  "$ref": "#/definitions/Coin"
                },
                "sent": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "dca_vault_execution_skipped"
          ],
          "properties": {
            "dca_vault_execution_skipped": {
              "type": "object",
              "required": [
                "reason"
              ],
              "properties": {
                "reason": {
                  "$ref": "#/definitions/ExecutionSkippedReason"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "simulated_dca_vault_execution_skipped"
          ],
          "properties": {
            "simulated_dca_vault_execution_skipped": {
              "type": "object",
              "required": [
                "reason"
              ],
              "properties": {
                "reason": {
                  "$ref": "#/definitions/ExecutionSkippedReason"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "dca_vault_cancelled"
          ],
          "properties": {
            "dca_vault_cancelled": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "dca_vault_z_delegation_succeeded"
          ],
          "properties": {
            "dca_vault_z_delegation_succeeded": {
              "type": "object",
              "required": [
                "delegation",
                "validator_address"
              ],
              "properties": {
                "delegation": {
                  "$ref": "#/definitions/Coin"
                },
                "validator_address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "dca_vault_delegation_failed"
          ],
          "properties": {
            "dca_vault_delegation_failed": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "dca_vault_escrow_disbursed"
          ],
          "properties": {
            "dca_vault_escrow_disbursed": {
              "type": "object",
              "required": [
                "amount_disbursed",
                "performance_fee"
              ],
              "properties": {
                "amount_disbursed": {
                  "$ref": "#/definitions/Coin"
                },
                "performance_fee": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ExecutionSkippedReason": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "slippage_tolerance_exceeded",
            "unknown_failure"
          ]
        },
        {
          "type": "object",
          "required": [
            "price_threshold_exceeded"
          ],
          "properties": {
            "price_threshold_exceeded": {
              "type": "object",
              "required": [
                "price"
              ],
              "properties": {
                "price": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "price_delta_limit_exceeded"
          ],
          "properties": {
            "price_delta_limit_exceeded": {
              "type": "object",
              "required": [
                "actual_price_delta",
                "duration_in_seconds",
                "max_price_delta"
              ],
              "properties": {
                "actual_price_delta": {
                  "$ref": "#/definitions/Decimal"
                },
                "duration_in_seconds": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "max_price_delta": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}

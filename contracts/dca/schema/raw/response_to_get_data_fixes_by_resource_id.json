{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "DataFixesResponse",
  "type": "object",
  "required": [
    "fixes"
  ],
  "properties": {
    "fixes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DataFix"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "DataFix": {
      "type": "object",
      "required": [
        "block_height",
        "data",
        "id",
        "resource_id",
        "timestamp"
      ],
      "properties": {
        "block_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "data": {
          "$ref": "#/definitions/DataFixData"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "resource_id": {
          "$ref": "#/definitions/Uint128"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      },
      "additionalProperties": false
    },
    "DataFixData": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "vault_amounts"
          ],
          "properties": {
            "vault_amounts": {
              "type": "object",
              "required": [
                "new_received",
                "new_swapped",
                "old_received",
                "old_swapped"
              ],
              "properties": {
                "new_received": {
                  "$ref": "#/definitions/Coin"
                },
                "new_swapped": {
                  "$ref": "#/definitions/Coin"
                },
                "old_received": {
                  "$ref": "#/definitions/Coin"
                },
                "old_swapped": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "execution_completed_event_amounts"
          ],
          "properties": {
            "execution_completed_event_amounts": {
              "type": "object",
              "required": [
                "new_fee",
                "new_received",
                "new_sent",
                "old_fee",
                "old_received",
                "old_sent"
              ],
              "properties": {
                "new_fee": {
                  "$ref": "#/definitions/Coin"
                },
                "new_received": {
                  "$ref": "#/definitions/Coin"
                },
                "new_sent": {
                  "$ref": "#/definitions/Coin"
                },
                "old_fee": {
                  "$ref": "#/definitions/Coin"
                },
                "old_received": {
                  "$ref": "#/definitions/Coin"
                },
                "old_sent": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}

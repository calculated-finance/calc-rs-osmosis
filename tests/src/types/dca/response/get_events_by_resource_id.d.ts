/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type EventData =
  | {
      dca_vault_funds_deposited: {
        amount: Coin;
      };
    }
  | {
      dca_vault_execution_triggered: {
        asset_price: Decimal;
        base_denom: string;
        quote_denom: string;
      };
    }
  | {
      dca_vault_execution_completed: {
        fee: Coin;
        received: Coin;
        sent: Coin;
      };
    }
  | {
      simulated_dca_vault_execution_completed: {
        fee: Coin;
        received: Coin;
        sent: Coin;
      };
    }
  | {
      dca_vault_execution_skipped: {
        reason: ExecutionSkippedReason;
      };
    }
  | {
      simulated_dca_vault_execution_skipped: {
        reason: ExecutionSkippedReason;
      };
    }
  | {
      dca_vault_cancelled: {};
    }
  | {
      dca_vault_escrow_disbursed: {
        amount_disbursed: Coin;
        performance_fee: Coin;
      };
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;
export type ExecutionSkippedReason =
  | ("slippage_tolerance_exceeded" | "swap_amount_adjusted_to_zero")
  | {
      price_threshold_exceeded: {
        price: Decimal;
      };
    };
/**
 * A point in time in nanosecond precision.
 *
 * This type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.
 *
 * ## Examples
 *
 * ``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);
 *
 * let ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```
 */
export type Timestamp = Uint64;
/**
 * A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u64` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);
 *
 * let b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```
 */
export type Uint64 = string;

export interface EventsResponse {
  events: Event[];
}
export interface Event {
  block_height: number;
  data: EventData;
  id: number;
  resource_id: Uint128;
  timestamp: Timestamp;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
